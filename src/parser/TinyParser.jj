options
{
    STATIC = false ;
}
PARSER_BEGIN (TinyParser)
   package parser;
   import java.util.ArrayList;
   import java.util.HashMap;
   class TinyParser {
         ArrayList<Statement> initParser()throws ParseException, TokenMgrError {
            return(init()) ;
         }
   }
PARSER_END (TinyParser)

SKIP: { "\n" | "\r" | "\r\n" |"\\"|"\t"|" "}

TOKEN [IGNORE_CASE]:
{
 <CREATE :("Create Table")>
|<DROP : ("Drop Table")>
|<SELECT : ("Select")>
|<INSERT : ("Insert Into")>
|<DELETE : ("Delete From")>
|<DISTINCT : ("Distinct")>
|<VALUES : ("Values")>
|<FROM : ("From")>
|<WHERE : ("Where")>
|<ORDERBY : ("Order By")>
|<NULL : ("Null")>
|<DATATYPE : ("INT")|("STR20")>
|<DIGIT :(["0"-"9"]) >
|<LETTER:(["a"-"z"]) >
|<NUMERAL:(<LETTER>)(["a"-"z","0"-"9"])+ >
|<LPAREN:("(")>
|<RPAREN:(")")>
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
|<COMMA:(",")>
|<DOT: "." >
//|<SPACE: " " >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
|<LT:("<")>
|<GT:(">")>
|<EQ:("=")>
|<COMP_OP:(<LT>)|(<GT>)|(<EQ>)>
|<QUOTE:"\"">
}

//SPECIAL_TOKEN : {<COMMENT:("#")+(<DIGIT>|<LETTER>|" ")*("#")+>}

Token TableName():
{
    Token T;
}
{
    T = <LETTER>
    {return T;} |
    T = <NUMERAL>
    {return T;}
}

Token AttributeName():
{
    Token T;
}
{
    T = <LETTER>
    {return T;} |
    T = <NUMERAL>
    {return T;}
}

Token ColumnName():
{
    Token T;
    Token S = null;
}
{
    T = TableName()[<DOT> S = AttributeName()]
    {
        if (S!= null) {T.image = T.image + "." + S.image;}
        return T;
    }
}

Token Literal():
{Token T;}
{
    T = <QUOTE>(<DIGIT>|<LETTER>|<LPAREN>|<RPAREN>|<COMMA>|<DOT>)*<QUOTE>
    {return T;}
}



ArrayList<Statement> init():
{
    ArrayList<Statement> stmtList = new ArrayList<Statement>();
    Statement stmt;
}
{
    (
          stmt = CreateStatement()
          {stmtList.add(stmt) ;}
        | stmt = DropStatement()
          {stmtList.add(stmt) ;}
        | stmt = SelectStatement()
          {stmtList.add(stmt) ;}
//        | stmt = InsertStatement()
//          {stmtList.add(stmt) ;}
//        | stmt = DeleteStatement()
//          {stmtList.add(stmt) ;}
    )*
    <EOF>
    {return stmtList;}
}

Statement CreateStatement():
{
    Token T;
    Statement stmt;
    HashMap<String,String> attributes;
}
{
    <CREATE>
    T = TableName()
    <LPAREN>
    attributes = AttrList()
    <RPAREN>
    {
        stmt = new CreateStatement(T.image, attributes);
        return stmt;
    }
}

HashMap AttrList():
{
   Token AName;
   Token AType;
   HashMap<String,String> var = new HashMap<String, String>();
}
{
    AName = AttributeName()
    AType = <DATATYPE>
    {   var.put(AName.image,AType.image);    }
    (
        [<COMMA>]
        AName = AttributeName()
        AType = <DATATYPE>
        {   var.put(AName.image,AType.image);    }
    )*
    {
        return var;
    }
}

Statement DropStatement():
{
    Token T;
}
{
    <DROP>
    T = TableName()
    {
        return new DropStatement(T.image);
    }
}

Statement SelectStatement():
{
    Token D = null;
    Statement stmt;
    ArrayList<String> selList;
    ArrayList<String> tabList;
}
{
    <SELECT>
    [D = <DISTINCT>]
    selList = selectList()
    <FROM>
    tabList = tableList()
    {
        stmt = new SelectStatement(D, selList, tabList);
        return stmt;
    }
}

ArrayList<String> selectList():
{
    ArrayList<String> subList;
}
{
    <STAR>
        {return  new ArrayList<String>(){{add("*");}};}
    | subList = selectSubList()
        {return subList;}
}

ArrayList<String> selectSubList():
{
    Token T;
    ArrayList<String> subList = new ArrayList<String>();
}
{
    T = ColumnName()
    {subList.add(T.image);}
    (
        <COMMA>
        T = ColumnName()
        {subList.add(T.image);}
    )*
    {return subList;}
}

ArrayList<String> tableList():
{
    Token T;
    ArrayList<String> tabList = new ArrayList<String>();
}
{
    T = TableName()
    {tabList.add(T.image);}
    (
        <COMMA>
        T = TableName()
        {tabList.add(T.image);}
    )*
    {return tabList;}
}